class h{static argNotFound(t){return Error(`${t?t+" a":"A"}rguments not found\n`)}static wrongType(t,e,i){return Error(`${i?i+" w":"W"}rong type expected ${t} found ${e}\n`)}static missingValue(t){return Error(`${t?t+" i":"I"}s required\n`)}static missingPath(){return Error("An argument for path was expected but found nothing")}}class x{name;type;short;description;required;example;constructor(t){this.name=t.name,this.type=t.type,this.short=t.short,this.description=t.description,this.required=t.required,this.example=t.example}checkType(t){let e=this.type==="number"?this.checkNumber(t):this.checkString(t);if(this.type==="path")e=this.checkPath(e);if(this.type==="regexp")e=this.checkRegEXP(e);return e}checkExists(t){if(!this.required)return!0;if(!t[this.name.slice(2)])throw h.missingValue(this.name);return!0}checkNumber(t){const e=Number(t);if(isNaN(e))throw h.wrongType(this.type,typeof t,this.name);return e}checkString(t){if(typeof t!=="string")throw h.wrongType(this.type,typeof t,this.name);if(t.length<1)throw h.missingValue(this.name);if(t[0]===t[t.length-1]&&['"',"'"].includes(t[0]))return t.slice(1,-1);return t}checkPath(t){if(!new RegExp(/(^(.?)(\/))+.*\/?/).exec(t))throw h.wrongType(this.type,t,this.name);return`${process.cwd()}/${t.replace(/^(.?)(\/)/,"$1")}`}checkRegEXP(t){return new RegExp(t)}}class f{name;description;args;place;separator;schema;help;path;value;constructor({name:t,description:e,help:i,path:r,separator:n,schema:s}){this.name=t,this.description=e,this.args=Bun.argv.slice(r&&![i?.name,i?.short].includes(Bun.argv[2])?3:2),this.place={working:process.cwd(),selected:`${process.cwd()}${r?"/"+Bun.argv[2].replace(/^(.?)(\/)/,""):""}`},this.separator=n??"=",this.schema=Object.keys(s).map((o)=>new x({name:"--"+o,...s[o]})),this.path=r??!1,this.help=i,this.value=this.parse()}parse(){if(this.help&&(this.args.includes(this.help.name)||this.args.includes(this.help.short)))return this.helper();const t=Object();for(let e of this.args){const[i,r]=e.split(this.separator),n=this.schema.find((s)=>s.name===i);if(!n)throw h.argNotFound(i);if(n.type!=="boolean"){const s=n.checkType(r);t[n.name.slice(2)]=s}else t[n.name.slice(2)]=!0}return this.schema.every((e)=>e.checkExists(t)),{path:this.place,values:t}}helper(){const t=this.help,e=this.args.flatMap((r)=>r.split(this.separator)).filter((r)=>r.includes("--"));let i=e.indexOf(t.name);if(i<0&&t.short)i=e.indexOf(t.short);if(i>0){const r=e.slice(0,i),n=[];for(let s of r){const o=this.schema.find((l)=>l.name===s);if(!o)throw h.argNotFound(s);n.push(o)}return n.map((s)=>this.message(s)).join("\n")}else{const r=this.schema.map((n)=>this.message(n));return`${this.name?`Program : ${this.name}\n`:""}${this.description?`Description : ${this.description}\n`:""}Separator : ${this.separator}\n\nHelp args : ${t.name}${t.short?" & "+t.short:""}\n\nbunx ${this.name?this.name:""} ${this.path?"[PATH] ":""}[OPTION]\n\nOption :\n${r.join("\n")}`}}message(t){return`|Name : ${t.name}\n${t.short?`|Short : ${t.short}\n`:""}${t.description?`|Description : 
      ${t.description}\n`:""}|Type : ${t.type}\n|Required : ${t.required?"Yes":"No"}\n|Example : ${t.name}${t.type!=="boolean"?`${this.separator}${t.example?t.example:t.type==="number"?3:'"exemple"'}`:""}\n`}getValue(){if(typeof this.value==="string")Bun.write(Bun.stdout,this.value);return this.value}static generate(t){return new f(t).getValue()}}var $=f;async function d(t,e){const i=[],r=await(await Bun.$`ls -l ${t}`.quiet()).text().split("\n").filter((s)=>!!s);i.push(...r.filter((s)=>!s.endsWith(".d.ts")&&F.some((o)=>s.endsWith(o))).map((s)=>({name:s,path:`${t}/${s}`.split(e)[1]})));const n=r.filter((s)=>s.split(".").length<2&&!s.includes("node_modules"));for(let s of n)i.push(...await d(`${t}/${s}`,e));return i}async function w(t){const e=/(.+"(.+)": \["(.+)"\],?)/,i=/"paths": {\n(.+\n)+.+}\n/gm,r=Bun.file(t+"/tsconfig.json");if(!await r.exists())return console.log("No tsconfig.json found"),[];const n=(await r.text()).match(i);if(!n)return[];return n[0].split("\n").map((o)=>o.match(e)).filter((o)=>!!o).map((o)=>({short:o?.[2].split("*")[0],long:o?.[3].split("*")[0]}))}var F=["js","ts","jsx","tsx"];class u{t;e;i;checked;constructor(t,e,i){this.list=t;this.shortcut=e;this.folder=i;this.checked=new Set}checkFile(t){if(this.checked.has(t))return!0;this.checked.add(t)}async checkIsUsed(t){if(this.checkFile(t))return new Set;const e=await this.getImportsLine(t);let i=new Set;for(let r of e){if(r.startsWith("~/edgedb"))continue;if(!r)continue;const n=this.parsePath(r,t),s=this.countGoBack(n),o=n.match(/[(\.\.\/)]+(\/.+)/);if(!o)continue;const l=this.list.find((b)=>b.path.split(".").slice(0,-1).join(".").endsWith(o[1]));if(!l)continue;i.add(l.path);const S=`${this.goBack(t,s)}${this.goBack(o[1],1)}/${l.name}`;i=i.union(await this.checkIsUsed(S))}return i}countGoBack(t){const e=t.match(/(\.\.\/)/g);if(!e)return 1;return e.length+1}goBack(t,e){return t.split("/").slice(0,0-e).join("/")}findMatchingShortcut(t,e){const r=this.shortcut.filter((n)=>t.startsWith(n.short)).sort((n,s)=>n.short.length>s.short.length?-1:1)[0];return t.replace(r.short,this.folder+r.long.split(".")[1]).split("/")}parsePath(t,e){if(!t.startsWith("~"))return t;const i=this.findMatchingShortcut(t,e),r=e.split("/"),n=[];for(let s=0;s<i.length;s++){if(r[s]===i[s]&&n.length===0)continue;if(!n.length)n.push(...new Array(r.length-s-1).fill(".."));n.push(i[s])}return n.join("/")}async getImportsLine(t){const e=(await Bun.file(t).text()).split("\n").filter((n)=>n.startsWith("import")),i=new RegExp(/['"]([~.//].+)['"]/);return e.map((n)=>{const s=i.exec(n);if(!s)return;return s[1]}).filter((n)=>!!n)}}async function B(t,e,i){let r=new Set;for(let n of i){const s=await e.checkIsUsed(c+n.path);r=r.union(s)}return r}var W=new Set(["entry.express.tsx","entry.ssr.tsx","entry.dev.tsx","entry.preview.tsx","root.tsx","router-head.tsx"]),k=$.generate({name:"ts-reverse-build",help:{name:"--help",short:"-h"},path:!0,schema:{}});if(typeof k==="string")process.exit(0);console.clear();console.log("Get all file from path...");var c=k.path.selected;console.log("Search for tsconfig.json...");var I=await w(c),a=await d(c,c);console.log(`Found ${a.length} files`);console.log("Search for unused files...");var N=a.filter((t)=>t.path.endsWith("index.tsx")||t.path.endsWith("layout.tsx")||t.path.endsWith("index.ts"));a=a.filter((t)=>!W.has(t.name)&&t.name.split(".").length>1);var j=new u(a,I,c),T=await B(c,j,N),g=a.filter((t)=>!(t.path.endsWith("index.tsx")||t.path.endsWith("layout.tsx")||t.path.endsWith("index.ts"))&&!T.has(t.path));if(!g.length)console.log("Did not found any unused file"),process.exit(0);console.log(`Found ${g.length} unused files`);console.log("List of files ( name | path )");g.sort((t,e)=>t.path.localeCompare(e.path)).forEach((t)=>{console.log(`\t${t.name} | ${t.path}`)});var y=!1,m={accept:["y","yes","Y","Yes","o","oui"],refuse:["n","no","N","No","non","Non"]},p;while(!y){if(console.log("The program want to move the selected files to an external folder"),p=prompt("Do you want to continue(y/N)","y"),!p)continue;if(m.accept.includes(p)||m.refuse.includes(p))y=!0}if(m.accept.includes(p)){console.log("Creating folder for unusedFile..."),await Bun.$`mkdir ${c}/unusedFile`,console.log("Move unused file to created folder...");for(let t of g)await Bun.$`mv ${c}${t.path} ${c}/unusedFile`;console.log(`The files have been successfully moved to ${c}/unusedFile`)}process.exit(0);
